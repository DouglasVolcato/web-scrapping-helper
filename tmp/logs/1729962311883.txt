Request:
{'url': 'https://viamao.govbr.cloud/pronimtb/purl.js', 'method': 'GET', 'headers': [('user-agent', 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0'), ('accept', '*/*'), ('accept-language', 'en-US,en;q=0.5'), ('accept-encoding', 'gzip, deflate, br, zstd'), ('referer', 'https://viamao.govbr.cloud/pronimtb/index.asp?acao=4&item=2'), ('sec-fetch-dest', 'script'), ('sec-fetch-mode', 'no-cors'), ('sec-fetch-site', 'same-origin'), ('priority', 'u=2'), ('te', 'trailers'), ('cookie', 'ASPSESSIONIDCEQBRBST=AGHNDONBOOFFBFIAANAMCNHP')], 'params': {}, 'body': b''}

Response:
{'status_code': 200, 'headers': [('content-type', 'application/javascript'), ('last-modified', 'Thu, 26 Sep 2024 20:46:12 GMT'), ('accept-ranges', 'bytes'), ('etag', '"0423e1f5510db1:0"'), ('server', 'Microsoft-IIS/10.0'), ('x-powered-by', 'ASP.NET'), ('date', 'Sat, 26 Oct 2024 17:04:40 GMT'), ('content-length', '9095')], 'body': b'/*\r\n * Purl (A JavaScript URL parser) v2.3.1\r\n * Developed and maintanined by Mark Perkins, mark@allmarkedup.com\r\n * Source repository: https://github.com/allmarkedup/jQuery-URL-Parser\r\n * Licensed under an MIT-style license. See https://github.com/allmarkedup/jQuery-URL-Parser/blob/master/LICENSE for details.\r\n */\r\n\r\n;(function(factory) {\r\n    if (typeof define === \'function\' && define.amd) {\r\n        define(factory);\r\n    } else {\r\n        window.purl = factory();\r\n    }\r\n})(function() {\r\n\r\n    var tag2attr = {\r\n            a       : \'href\',\r\n            img     : \'src\',\r\n            form    : \'action\',\r\n            base    : \'href\',\r\n            script  : \'src\',\r\n            iframe  : \'src\',\r\n            link    : \'href\',\r\n            embed   : \'src\',\r\n            object  : \'data\'\r\n        },\r\n\r\n        key = [\'source\', \'protocol\', \'authority\', \'userInfo\', \'user\', \'password\', \'host\', \'port\', \'relative\', \'path\', \'directory\', \'file\', \'query\', \'fragment\'], // keys available to query\r\n\r\n        aliases = { \'anchor\' : \'fragment\' }, // aliases for backwards compatability\r\n\r\n        parser = {\r\n            strict : /^(?:([^:\\/?#]+):)?(?:\\/\\/((?:(([^:@]*):?([^:@]*))?@)?([^:\\/?#]*)(?::(\\d*))?))?((((?:[^?#\\/]*\\/)*)([^?#]*))(?:\\?([^#]*))?(?:#(.*))?)/,  //less intuitive, more accurate to the specs\r\n            loose :  /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*):?([^:@]*))?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/ // more intuitive, fails on relative paths and deviates from specs\r\n        },\r\n\r\n        isint = /^[0-9]+$/;\r\n\r\n    function parseUri( url, strictMode ) {\r\n        var str = decodeURI( url ),\r\n        res   = parser[ strictMode || false ? \'strict\' : \'loose\' ].exec( str ),\r\n        uri = { attr : {}, param : {}, seg : {} },\r\n        i   = 14;\r\n\r\n        while ( i-- ) {\r\n            uri.attr[ key[i] ] = res[i] || \'\';\r\n        }\r\n\r\n        // build query and fragment parameters\r\n        uri.param[\'query\'] = parseString(uri.attr[\'query\']);\r\n        uri.param[\'fragment\'] = parseString(uri.attr[\'fragment\']);\r\n\r\n        // split path and fragement into segments\r\n        uri.seg[\'path\'] = uri.attr.path.replace(/^\\/+|\\/+$/g,\'\').split(\'/\');\r\n        uri.seg[\'fragment\'] = uri.attr.fragment.replace(/^\\/+|\\/+$/g,\'\').split(\'/\');\r\n\r\n        // compile a \'base\' domain attribute\r\n        uri.attr[\'base\'] = uri.attr.host ? (uri.attr.protocol ?  uri.attr.protocol+\'://\'+uri.attr.host : uri.attr.host) + (uri.attr.port ? \':\'+uri.attr.port : \'\') : \'\';\r\n\r\n        return uri;\r\n    }\r\n\r\n    function getAttrName( elm ) {\r\n        var tn = elm.tagName;\r\n        if ( typeof tn !== \'undefined\' ) return tag2attr[tn.toLowerCase()];\r\n        return tn;\r\n    }\r\n\r\n    function promote(parent, key) {\r\n        if (parent[key].length === 0) return parent[key] = {};\r\n        var t = {};\r\n        for (var i in parent[key]) t[i] = parent[key][i];\r\n        parent[key] = t;\r\n        return t;\r\n    }\r\n\r\n    function parse(parts, parent, key, val) {\r\n        var part = parts.shift();\r\n        if (!part) {\r\n            if (isArray(parent[key])) {\r\n                parent[key].push(val);\r\n            } else if (\'object\' == typeof parent[key]) {\r\n                parent[key] = val;\r\n            } else if (\'undefined\' == typeof parent[key]) {\r\n                parent[key] = val;\r\n            } else {\r\n                parent[key] = [parent[key], val];\r\n            }\r\n        } else {\r\n            var obj = parent[key] = parent[key] || [];\r\n            if (\']\' == part) {\r\n                if (isArray(obj)) {\r\n                    if (\'\' !== val) obj.push(val);\r\n                } else if (\'object\' == typeof obj) {\r\n                    obj[keys(obj).length] = val;\r\n                } else {\r\n                    obj = parent[key] = [parent[key], val];\r\n                }\r\n            } else if (~part.indexOf(\']\')) {\r\n                part = part.substr(0, part.length - 1);\r\n                if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);\r\n                parse(parts, obj, part, val);\r\n                // key\r\n            } else {\r\n                if (!isint.test(part) && isArray(obj)) obj = promote(parent, key);\r\n                parse(parts, obj, part, val);\r\n            }\r\n        }\r\n    }\r\n\r\n    function merge(parent, key, val) {\r\n        if (~key.indexOf(\']\')) {\r\n            var parts = key.split(\'[\');\r\n            parse(parts, parent, \'base\', val);\r\n        } else {\r\n            if (!isint.test(key) && isArray(parent.base)) {\r\n                var t = {};\r\n                for (var k in parent.base) t[k] = parent.base[k];\r\n                parent.base = t;\r\n            }\r\n            if (key !== \'\') {\r\n                set(parent.base, key, val);\r\n            }\r\n        }\r\n        return parent;\r\n    }\r\n\r\n    function parseString(str) {\r\n        return reduce(String(str).split(/&|;/), function(ret, pair) {\r\n            try {\r\n                pair = decodeURIComponent(pair.replace(/\\+/g, \' \'));\r\n            } catch(e) {\r\n                // ignore\r\n            }\r\n            var eql = pair.indexOf(\'=\'),\r\n                brace = lastBraceInKey(pair),\r\n                key = pair.substr(0, brace || eql),\r\n                val = pair.substr(brace || eql, pair.length);\r\n\r\n            val = val.substr(val.indexOf(\'=\') + 1, val.length);\r\n\r\n            if (key === \'\') {\r\n                key = pair;\r\n                val = \'\';\r\n            }\r\n\r\n            return merge(ret, key, val);\r\n        }, { base: {} }).base;\r\n    }\r\n\r\n    function set(obj, key, val) {\r\n        var v = obj[key];\r\n        if (typeof v === \'undefined\') {\r\n            obj[key] = val;\r\n        } else if (isArray(v)) {\r\n            v.push(val);\r\n        } else {\r\n            obj[key] = [v, val];\r\n        }\r\n    }\r\n\r\n    function lastBraceInKey(str) {\r\n        var len = str.length,\r\n            brace,\r\n            c;\r\n        for (var i = 0; i < len; ++i) {\r\n            c = str[i];\r\n            if (\']\' == c) brace = false;\r\n            if (\'[\' == c) brace = true;\r\n            if (\'=\' == c && !brace) return i;\r\n        }\r\n    }\r\n\r\n    function reduce(obj, accumulator){\r\n        var i = 0,\r\n            l = obj.length >> 0,\r\n            curr = arguments[2];\r\n        while (i < l) {\r\n            if (i in obj) curr = accumulator.call(undefined, curr, obj[i], i, obj);\r\n            ++i;\r\n        }\r\n        return curr;\r\n    }\r\n\r\n    function isArray(vArg) {\r\n        return Object.prototype.toString.call(vArg) === "[object Array]";\r\n    }\r\n\r\n    function keys(obj) {\r\n        var key_array = [];\r\n        for ( var prop in obj ) {\r\n            if ( obj.hasOwnProperty(prop) ) key_array.push(prop);\r\n        }\r\n        return key_array;\r\n    }\r\n\r\n    function purl( url, strictMode ) {\r\n        if ( arguments.length === 1 && url === true ) {\r\n            strictMode = true;\r\n            url = undefined;\r\n        }\r\n        strictMode = strictMode || false;\r\n        url = url || window.location.toString();\r\n\r\n        return {\r\n\r\n            data : parseUri(url, strictMode),\r\n\r\n            // get various attributes from the URI\r\n            attr : function( attr ) {\r\n                attr = aliases[attr] || attr;\r\n                return typeof attr !== \'undefined\' ? this.data.attr[attr] : this.data.attr;\r\n            },\r\n\r\n            // return query string parameters\r\n            param : function( param ) {\r\n                return typeof param !== \'undefined\' ? this.data.param.query[param] : this.data.param.query;\r\n            },\r\n\r\n            // return fragment parameters\r\n            fparam : function( param ) {\r\n                return typeof param !== \'undefined\' ? this.data.param.fragment[param] : this.data.param.fragment;\r\n            },\r\n\r\n            // return path segments\r\n            segment : function( seg ) {\r\n                if ( typeof seg === \'undefined\' ) {\r\n                    return this.data.seg.path;\r\n                } else {\r\n                    seg = seg < 0 ? this.data.seg.path.length + seg : seg - 1; // negative segments count from the end\r\n                    return this.data.seg.path[seg];\r\n                }\r\n            },\r\n\r\n            // return fragment segments\r\n            fsegment : function( seg ) {\r\n                if ( typeof seg === \'undefined\' ) {\r\n                    return this.data.seg.fragment;\r\n                } else {\r\n                    seg = seg < 0 ? this.data.seg.fragment.length + seg : seg - 1; // negative segments count from the end\r\n                    return this.data.seg.fragment[seg];\r\n                }\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n    \r\n    purl.jQuery = function($){\r\n        if ($ != null) {\r\n            $.fn.url = function( strictMode ) {\r\n                var url = \'\';\r\n                if ( this.length ) {\r\n                    url = $(this).attr( getAttrName(this[0]) ) || \'\';\r\n                }\r\n                return purl( url, strictMode );\r\n            };\r\n\r\n            $.url = purl;\r\n        }\r\n    };\r\n\r\n    purl.jQuery(window.jQuery);\r\n\r\n    return purl;\r\n\r\n});'}